name: Android CI/CD Pipeline

# üöÄ Features Included in the CI/CD Pipeline
# üöß PR Restriction: Ensures only repository collaborators/members can raise PRs.
# üõ°Ô∏è Security Scan (CodeQL): Runs CodeQL security analysis.
# üîç Dependency Scan (Trivy): Scans dependencies for vulnerabilities.
# ü§ñ AI Code Review (Copilot): Enforces GitHub Copilot AI review on PRs.
# üìú PR Description Enforcement: Ensures meaningful PR descriptions.
# üìë PR File Limit Enforcement: Restricts PRs modifying too many files.
# üé® Linting (ktlint): Enforces Kotlin coding standards.
# ‚úÖ Organization Owner Approval: Requires manual approval from the repository owner.
# üöÄ Build & APK Generation: Compiles the project and generates an APK.
# üß™ Unit Testing: Runs unit tests (optional but recommended).
# ‚úÖ Final Merge Check: Ensures that all required jobs pass before PR approval.
# üîÑ Fail-Fast Strategy: Prevents unnecessary job execution if a critical job fails.
# ‚è≥ Timeout Enforcement: Limits execution time to prevent long-running jobs.
# ‚ôªÔ∏è Resource Cleanup: Ensures that workspaces are cleaned after execution.
# üì¢ Notifications: Sends alerts in case of failures (Slack, email, etc.).
# üîÅ Retry Mechanism: Retries transient failures automatically.
# ‚ö° Parallelization: Runs independent jobs concurrently to speed up execution.
# üì¶ Dependency Caching: Caches Gradle dependencies to optimize build speed.


on:
  pull_request:
    types: [opened, synchronize, reopened, edited, ready_for_review]
    branches:
      - master
    paths:
      - '**'
  push:
    branches:
      - master

permissions:
  pull-requests: write
  contents: write
  security-events: write  # Required for CodeQL scanning
  actions: write
  statuses: write

jobs:
# 1Ô∏è‚É£ Pre-Checks & PR Validation (No dependencies)
  pr_restriction:
    name: üöß Enforce PR Restrictions
    # ‚ùå Prevents workflow execution if triggered by `github-merge-queue`
    if: github.actor != 'github-merge-queue[bot]'
    runs-on: ubuntu-latest
    steps:
      - name: ‚è≥ Delay Before Job Start
        run: sleep 3  # Adds a 3-second delay before execution
      - name: üîç Debug & Verify PR Author and Branch
        env:
          GH_TOKEN: ${{ secrets.GH_MAIN_TOKEN }}  # ‚úÖ Use the Org Owner Token
        run: |
          echo "üîç Starting PR Debugging..."
          echo "üîπ GitHub Event: ${{ github.event_name }}"
          echo "üîπ Repository: ${{ github.repository }}"
          echo "üîπ Actor (PR Author): ${{ github.actor }}"
          echo "üîπ Action: ${{ github.event.action }}"
          echo "üîπ PR Number: ${{ github.event.pull_request.number }}"
          echo "üîπ PR URL: ${{ github.event.pull_request.html_url }}"
          
          echo "üîç Extracting PR Number..."
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO_NAME="${{ github.repository }}"
          PR_BRANCH="${{ github.event.pull_request.head.ref }}"  # ‚úÖ Fixed issue here
          
          if [[ -z "$PR_NUMBER" || "$PR_NUMBER" == "null" ]]; then
            echo "‚ùå ERROR: PR number is missing or invalid."
            exit 1
          fi
          echo "üîπ Extracted PR Number: '$PR_NUMBER'"
          echo "üîπ Repository: $REPO_NAME"
          echo "üîç Checking GitHub Token Authentication..."
          gh auth status || { echo "‚ùå ERROR: GitHub authentication failed!"; exit 1; }
          echo "üîç Fetching PR Author..."
          PR_USER=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO_NAME/pulls/$PR_NUMBER" | jq -r '.user.login')
          echo "‚úÖ PR Author: $PR_USER"

          if [[ -z "$PR_USER" || "$PR_USER" == "null" ]]; then
            echo "‚ùå ERROR: Failed to retrieve PR author."
            echo "   - PR number may be incorrect"
            echo "   - GH_TOKEN may lack permissions"
            echo "   - Repository may be private"
            exit 1
          fi

          echo "üîç Branch criteria : Checking PR Branch Naming Conventions..."
          echo "üîç Checking branch name..."
          PR_BRANCH="${{ github.event.pull_request.head.ref }}"
          echo "üîπ PR Branch: $PR_BRANCH"
          
          # Check if branch name contains the required string
          if [[ ! "$PR_BRANCH" =~ M/M01/PROD_TOOLS/OCR/ ]]; then
            echo "‚ùå ERROR: Branch name does not meet the required pattern 'M/M01/PROD_TOOLS/OCR/'."
            exit 1
          fi 
          echo "‚úÖ Branch name '$PR_BRANCH' is valid and meets the required pattern."

          echo "üîç Step 1Ô∏è‚É£: Checking if PR author is a 'neural-vision' team member..."
          TEAM_MEMBERS_URL="https://api.github.com/orgs/EduMilestoneDeveloperOrg/teams/neural-vision/members"
          TEAM_RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" "$TEAM_MEMBERS_URL")
          
          if echo "$TEAM_RESPONSE" | jq -e .message 2>/dev/null | grep -q "Not Found"; then
            echo "‚ùå ERROR: Team 'neural-vision' not found or API access denied."
            exit 1
          fi
          
          echo "üîπ Retrieved Team Members:"
          echo "$TEAM_RESPONSE" | jq -r '.[].login' || echo "‚ö†Ô∏è No team members found."
          
          if echo "$TEAM_RESPONSE" | jq -r '.[].login' | grep -q "^$PR_USER$"; then
            echo "‚úÖ PR Author '$PR_USER' is a member of 'neural-vision'. ‚úÖ PR Check PASS."
            exit 0  # ‚úÖ Allow PR
          fi

          echo "üîç Step 2Ô∏è‚É£: Checking if PR author '$PR_USER' is an Organization Member or Repository Collaborator..."
          
          # ‚úÖ Check if the PR author is an Organization Member
          ORG_MEMBERS_URL="https://api.github.com/orgs/EduMilestoneDeveloperOrg/members"
          ORG_MEMBERS_RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" "$ORG_MEMBERS_URL")
          # Extract organization members and log them
          ORG_MEMBERS=$(echo "$ORG_MEMBERS_RESPONSE" | jq -r '.[].login')
          echo "üîπ Retrieved Organization Members:"
          echo "$ORG_MEMBERS" || echo "‚ö†Ô∏è No organization members found."

          if echo "$ORG_MEMBERS" | grep -q "^$PR_USER$"; then
              echo "‚úÖ PR Author '$PR_USER' is an **Organization Member**. PR is allowed."
              exit 0
          fi

          # ‚úÖ Check if the PR author is a repository collaborator
          echo "üîç Step 4Ô∏è‚É£: Checking if PR author is an Outside Collaborator..."
          OUTSIDE_COLLAB_URL="https://api.github.com/repos/$REPO_NAME/outside_collaborators"
          OUTSIDE_COLLAB_RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" "$OUTSIDE_COLLAB_URL")

          # Log the full response for debugging
          echo "üîπ Full Outside Collaborators Response:"
          echo "$OUTSIDE_COLLAB_RESPONSE"

          # Check if the response is empty or invalid
          if [ -z "$OUTSIDE_COLLAB_RESPONSE" ]; then
              echo "‚ùå ERROR: No response or empty response from Outside Collaborators API."
              exit 1
          fi

          # Check if we received a 404 response (Not Found)
          if echo "$OUTSIDE_COLLAB_RESPONSE" | jq -e '.message == "Not Found"' > /dev/null; then
              echo "‚ö†Ô∏è No outside collaborators found or the endpoint is invalid."
              # Explicitly block the PR if no collaborators are found
              echo "‚ùå Blocking PR because no outside collaborators exist or the endpoint is invalid."
              exit 1  # Block PR if no outside collaborators are found
          fi

          # Check if the response is valid JSON
          if echo "$OUTSIDE_COLLAB_RESPONSE" | jq empty > /dev/null 2>&1; then
              echo "üîπ Retrieved Outside Collaborators:"
          
              # Check if the response is an array and contains collaborator data
              if echo "$OUTSIDE_COLLAB_RESPONSE" | jq -e 'type == "array"' > /dev/null; then
                  # Check if the PR author is in the list of outside collaborators
                  if echo "$OUTSIDE_COLLAB_RESPONSE" | jq -r '.[].login' | grep -q "^$PR_USER$"; then
                      echo "‚úÖ PR Author '$PR_USER' is an Outside Collaborator. ‚úÖ PR Check PASS."
                      exit 0  # ‚úÖ Allow PR if the author is an outside collaborator
                  else
                      echo "‚ùå ERROR: PR Author '$PR_USER' is NOT an Outside Collaborator."
                      echo "üîπ They are NOT a member of 'neural-vision'."
                      echo "üîπ They are NOT an Organization Member."
                      echo "üîπ They are NOT an Outside Collaborator."
                      echo "‚ùå Blocking PR."
                      exit 1  # ‚ùå Block PR if the author is not an outside collaborator
                  fi
              else
                  echo "‚ùå ERROR: The response is not an array of collaborators."
                  exit 1
              fi
          else
              echo "‚ùå ERROR: Failed to fetch valid JSON for outside collaborators."
              exit 1
          fi

  enforce_pr_description:
    name: üìú Enforce PR Description
    # ‚ùå Prevents workflow execution if triggered by `github-merge-queue`
    if: github.actor != 'github-merge-queue[bot]' 
    runs-on: ubuntu-latest
    needs: [pr_restriction]
    steps:
      - name: ‚è≥ Delay Before Job Start
        run: sleep 3  # Adds a 3-second delay before execution
      - name: üîç Check PR Description
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract pull request number
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO_NAME="${{ github.repository }}"
  
          if [[ -z "$PR_NUMBER" || "$PR_NUMBER" == "null" ]]; then
            echo "‚ùå ERROR: Invalid PR number. Cannot check description."
            exit 1
          fi
  
          # Retrieve the PR description using curl
          DESCRIPTION=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO_NAME/pulls/$PR_NUMBER" | jq -r '.body')
  
          # Debugging: Show raw description for clarity
          echo "üîç Raw PR Description:"
          echo "$DESCRIPTION"
  
          # Ensure description retrieval succeeded
          if [[ -z "$DESCRIPTION" || "$DESCRIPTION" == "null" ]]; then
            echo "‚ùå ERROR: PR must have a meaningful description!"
            exit 1
          fi
  
          # Trim whitespace and check if the description is empty
          TRIMMED_DESC=$(echo "$DESCRIPTION" | xargs)
  
          if [[ -z "$TRIMMED_DESC" ]]; then
            echo "‚ùå ERROR: PR description cannot be empty or only spaces!"
            exit 1
          fi
          
          echo "‚úÖ PR has a valid description."

  enforce_pr_files_limit:
    name: üìë Limit PR File Changes (Max 100)
    runs-on: ubuntu-latest
    needs: [enforce_pr_description]
    steps:
      - name: ‚è≥ Delay Before Job Start
        run: sleep 3  # Adds a 3-second delay before execution

      - name: üîß Install Dependencies
        run: sudo apt-get install -y jq  # Ensure `jq` is available

      - name: üîç Check Number of Files Changed (Handle Pagination)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO_NAME="${{ github.repository }}"

          if [[ -z "$PR_NUMBER" || "$PR_NUMBER" == "null" ]]; then
            echo "‚ùå ERROR: Invalid PR number. Cannot check file count."
            exit 1
          fi

          # ‚úÖ Fetch files with pagination (fetch up to 300 files)
          FILES_CHANGED=0
          PAGE=1

          while :; do
            RESPONSE=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$REPO_NAME/pulls/$PR_NUMBER/files?per_page=100&page=$PAGE")

            FILE_COUNT=$(echo "$RESPONSE" | jq 'length' 2>/dev/null || echo "0")

            # Stop if no more files are returned
            if [[ "$FILE_COUNT" -eq 0 ]]; then
              break
            fi

            FILES_CHANGED=$((FILES_CHANGED + FILE_COUNT))
            PAGE=$((PAGE + 1))
          done

          # ‚úÖ Debug: Print final file count
          echo "üîç Total Files Changed: $FILES_CHANGED"

          # ‚úÖ Verify file count against the limit
          if [[ "$FILES_CHANGED" -gt 100 ]]; then
            echo "‚ùå ERROR: PR modifies too many files ($FILES_CHANGED). Please split into smaller PRs."
            exit 1
          fi

          echo "‚úÖ PR modifies $FILES_CHANGED files, within the allowed limit."

  # 2Ô∏è‚É£ Security & Code Quality Checks (All depend on PR validation)
  security_scan:
    name: üõ°Ô∏è Run CodeQL Advanced Deep Scan
    # ‚ùå Prevents workflow execution if triggered by `github-merge-queue`
    if: github.actor != 'github-merge-queue[bot]' 
    needs: [enforce_pr_files_limit]
    uses: ./.github/workflows/codeql.yml  # Reusable CodeQL deep scan workflow
    with:
      language: 'java-kotlin'
      build-mode: 'autobuild'

  dependency_scan:
    name: üîç Dependency Scan (Trivy)
    # ‚ùå Prevents workflow execution if triggered by `github-merge-queue`
    if: github.actor != 'github-merge-queue[bot]' 
    runs-on: ubuntu-latest
    needs: [enforce_pr_files_limit]
    steps:
      - name: ‚è≥ Delay Before Job Start
        run: sleep 3  # Adds a 3-second delay before execution
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - name: üîé Scan for Vulnerabilities (Using Trivy Action)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          severity: 'HIGH,CRITICAL'
  
      - name: üìÑ Generate Trivy Report
        run: |
          trivy fs --severity HIGH,CRITICAL --format json -o trivy-report.json .
  
      - name: üìÑ Upload Trivy Scan Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-report
          path: trivy-report.json
  
      - name: üõ†Ô∏è Suggest Fixes
        run: |
          if [ -s trivy-report.json ]; then
            vulnerabilities=$(cat trivy-report.json | jq '.Results[]?.Vulnerabilities | length')
            if [ "$vulnerabilities" -gt 0 ]; then
              cat trivy-report.json | jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL") | "\(.PkgName) has \(.Severity) vulnerability: \(.VulnID) - \(.Title). Recommendation: \(.PrimaryURL)"'
            else
              echo "No high/critical vulnerabilities found."
            fi
          else
            echo "No vulnerabilities found or failed to generate the report."
          fi
  
      - name: üö® Fail if Vulnerabilities Found
        run: |
          if trivy fs --severity HIGH,CRITICAL . | grep -q "VULNERABILITY"; then
            echo "‚ùå High/Critical vulnerabilities found!"
            exit 1
          fi  # Added fi to properly close the if statement

 # Final Job merge check: Reporting Status to GitHub API
  merge_check:
    name: ‚úÖ Final Merge Check (All Jobs Status)
    # ‚ùå Prevents workflow execution if triggered by `github-merge-queue`
    if: github.actor != 'github-merge-queue[bot]' 
    runs-on: ubuntu-latest
    needs:
      - security_scan
      - dependency_scan
    outputs:
      merge_status: ${{ steps.verify_status.outputs.merge_status }}  # ‚úÖ Pass status to auto_merge
    steps:
      - name: ‚è≥ Delay Before Job Start
        run: sleep 3  # Adds a 3-second delay before execution
      - name: üî¨ Verify Job Status Before Merging
        id: verify_status
        run: |
          echo "üîé Checking all required job statuses..."
          if [[ "${{ needs.pr_restriction.result }}" == "failure" ]] || 
             [[ "${{ needs.enforce_pr_description.result }}" == "failure" ]] || 
             [[ "${{ needs.enforce_pr_files_limit.result }}" == "failure" ]] || 
             [[ "${{ needs.security_scan.result }}" == "failure" ]] || 
             [[ "${{ needs.dependency_scan.result }}" == "failure" ]]; then
            echo "‚ùå One or more jobs failed. Blocking merge."
            echo "merge_status=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "‚úÖ All jobs passed! Merge allowed."
          echo "merge_status=true" >> $GITHUB_OUTPUT
  
      - name: üì¢ üö¶ Update CI/CD Status on GitHub
        run: |
          echo "üîÑ Updating Final Merge Allow Status..."
          if [[ "${{ steps.verify_status.outputs.merge_status }}" == "true" ]]; then
            curl -X POST "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d '{"state": "success", "context": "Final Merge Allow", "description": "All checks passed successfully.", "target_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}'
          else
            curl -X POST "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d '{"state": "failure", "context": "Final Merge Allow", "description": "Merge blocked due to job failure.", "target_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}'
            exit 1
          fi
